#!/usr/bin/env python3

import os
import sys
import subprocess
import threading
import time
import shutil
import re # For external LLM check

def clean_llm_response(text):
    """Remove code blocks and thinking tags from LLM response."""
    # Remove <thinking>, 【thinking】, and 《》 tags and their contents (case-insensitive)
    text = re.sub(r'<(think(?:ing)?)>[^<]*?</\1>|【(think(?:ing)?)】[^【]*?【/\2】|《.*?》', '', text, flags=re.DOTALL | re.IGNORECASE)
    # Remove code blocks (with optional language specifier)
    text = re.sub(r'```(?:\w+)?\n.*?```', '', text, flags=re.DOTALL)
    return text.strip()

# --- Configuration ---
# Set default LLM_COMMIT model if not already set
# Use 'openrouter/mistralai/mistral-7b-instruct:free' as requested
#DEFAULT_LLM_COMMIT = "openrouter/qwen/qwen3-30b-a3b:free"
DEFAULT_LLM_COMMIT = "openai/Qwen/Qwen3-32B-AWQ"

# Determine user home and config directory
# $XDG_CONFIG_HOME is typically ~/.config, fallback to ~/.config
USER_HOME = os.path.expanduser('~')
XDG_CONFIG_HOME = os.environ.get('XDG_CONFIG_HOME', os.path.join(USER_HOME, '.config'))
GIT_CONFIG_DIR = os.path.join(XDG_CONFIG_HOME, 'git')

PROMPT_TEMPLATE_FILE = os.path.join(GIT_CONFIG_DIR, '.commit-system-prompt.txt')
GITMESSAGE_INCLUDE_FILE = os.path.join(GIT_CONFIG_DIR, '.gitmessage.txt')

# --- ANSI Color Codes ---
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[0;33m'
BLUE = '\033[0;34m'
MAGENTA = '\033[0;35m'
NC = '\033[0m' # No Color

# --- Helper for printing with colors ---
def print_color(color, text):
    """Prints text with the specified ANSI color."""
    print(f"{color}{text}{NC}")

# --- Spinner Animation ---
# Global event to signal the spinner thread to stop
spinner_stop_event = threading.Event()

def spin_animation():
    """Displays a spinning animation while the LLM processes."""
    spinner = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
    i = 0
    message = " Generating LLM commit message...   " # Keep length consistent

    # ANSI escape codes for terminal control
    hide_cursor = '\033[?25l' # CSI ? 25 l
    show_cursor = '\033[?25h' # CSI ? 25 h
    clear_to_eol = '\033[K' # CSI K (or El, Erase in Line)
    move_cursor_back = f'\033[{len(message) + 1}D' # CSI n D (Move Cursor Backward n) - +1 for the spinner character

    sys.stdout.write(hide_cursor)
    sys.stdout.flush()

    try:
        while not spinner_stop_event.is_set():
            sys.stdout.write(f"\r{YELLOW}{spinner[i % len(spinner)]}{NC}{message}")
            sys.stdout.flush()
            time.sleep(0.1)
            i += 1
    finally:
        # Ensure cursor is shown and line is cleared on exit
        sys.stdout.write('\r') # Move to start of line
        sys.stdout.write(clear_to_eol) # Clear the line
        sys.stdout.write(show_cursor)
        sys.stdout.flush()


# --- Main Script Logic ---
def main():
    # Check for SKIP_LLM_GITHOOK environment variable
    if os.environ.get('SKIP_LLM_GITHOOK'):
        sys.exit(0)

    # Check command-line arguments
    if len(sys.argv) < 2:
        # This should not happen in a standard Git hook, but good practice to check
        print_color(RED, "Error: Missing commit message file path argument.")
        sys.exit(1)

    commit_file_path = sys.argv[1]

    # Check if the commit is a merge commit (indicated by a second argument from Git)
    # Git passes the commit source as the second argument: empty for standard, 'merge' for merge, etc.
    # If there's a second argument, it's not a standard commit where we generate the message.
    if len(sys.argv) > 2:
        # sys.argv[2] would be 'merge', 'squash', 'commit', etc.
        # If it's anything other than an empty string, it's a non-standard commit.
        # The standard hook behavior is to exit for these.
        sys.exit(0)

    print("Generating commit with llm !")

    # Determine the LLM model to use
    llm_commit_model = os.environ.get('LLM_COMMIT', DEFAULT_LLM_COMMIT)

    # --- External LLM Service Warning ---
    is_local_llm = False
    # Simple check for common local indicators
    if re.search(r'(localhost|127\.|10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.|unix://)', llm_commit_model):
        is_local_llm = True

    if not is_local_llm:
        # Check for environment variable consent first
        llm_allow_external_lower = os.environ.get('LLM_ALLOW_EXTERNAL_COMMIT_MSG_GEN', '').lower()
        consent_via_env = llm_allow_external_lower in ('y', 'yes', 'true', '1')

        if consent_via_env:
            print_color(YELLOW, "Consent provided via LLM_ALLOW_EXTERNAL environment variable. Proceeding.")
        else:
            print_color(YELLOW, "--- External LLM Service Warning ---")
            print_color(YELLOW, f"Your configured LLM_COMMIT ('{llm_commit_model}') appears to be an external or non-local service.")
            print_color(YELLOW, "The diff of your staged changes will be sent to this service for analysis.")
            print_color(YELLOW, "This may include sensitive or private information from your code.")
            print_color(YELLOW, f"Set {RED}LLM_ALLOW_EXTERNAL_COMMIT_MSG_GEN=1 {YELLOW}to bypass this check !{NC}")
            print_color(YELLOW, "------------------------------------")
            sys.exit(1) # Exit if no consent and not local

    # --- End External LLM Service Warning ---

    # Check if the `llm` command is installed
    if shutil.which('llm') is None:
        print_color(RED, "Error: 'llm' command is not installed. Please install it ('pip install llm') and try again.")
        sys.exit(1)

    # Check if the prompt template file exists
    if not os.path.exists(PROMPT_TEMPLATE_FILE):
        print_color(RED, "Error: LLM commit system prompt template file not found:")
        print_color(RED, f"  '{PROMPT_TEMPLATE_FILE}'")
        print_color(RED, "Please create this file with the system prompt content.")
        sys.exit(1)

    # Check if the gitmessage include file exists (Optional)
    if not os.path.exists(GITMESSAGE_INCLUDE_FILE):
        #print_color(YELLOW, "Warning: Git message include file not found:")
        #print_color(YELLOW, f"  '{GITMESSAGE_INCLUDE_FILE}'")
        #print_color(YELLOW, "The '{{.gitmessage.txt}}' placeholder will be replaced with an empty string.")
        gitmessage_content = "" # Default to empty if file doesn't exist
    else:
        # Read the content of the gitmessage include file
        try:
            with open(GITMESSAGE_INCLUDE_FILE, 'r', encoding='utf-8') as f:
                gitmessage_content = f.read()
        except Exception as e:
            print_color(RED, f"Error reading git message include file '{GITMESSAGE_INCLUDE_FILE}': {e}")
            gitmessage_content = "" # Treat as empty on error

    # Read the content of the prompt template file
    try:
        with open(PROMPT_TEMPLATE_FILE, 'r', encoding='utf-8') as f:
            prompt_template_content = f.read()
    except Exception as e:
        print_color(RED, f"Error reading prompt template file '{PROMPT_TEMPLATE_FILE}': {e}")
        sys.exit(1)

    # Perform the substitution of '{{.gitmessage.txt}}'
    # No complex escaping needed for the string replacement itself in Python
    modified_prompt_content = prompt_template_content.replace("{{.gitmessage.txt}}", gitmessage_content)

    # --- Get Staged Diff ---
    try:
        # Use capture_output=True to get stdout and stderr, text=True for strings
        diff_process = subprocess.run(
            ['git', 'diff', '--cached'],
            capture_output=True,
            text=True,
            check=True # Raise CalledProcessError if git diff returns non-zero
        )
        staged_diff = diff_process.stdout
    except subprocess.CalledProcessError as e:
        print_color(RED, f"Error running 'git diff --cached': {e}")
        print_color(RED, f"Stderr:\n{e.stderr}")
        sys.exit(1)
    except FileNotFoundError:
        print_color(RED, "Error: 'git' command not found. Is Git installed and in your PATH?")
        sys.exit(1)

    # --- Run LLM Command ---
    # Start the spinning animation thread
    spinner_thread = threading.Thread(target=spin_animation)
    spinner_thread.start()

    commit_msg = ""
    try:
        # Run the llm command, piping the diff as input
        # shell=False is safer as it avoids shell injection issues
        llm_process = subprocess.run(
            ['llm', '-m', llm_commit_model, '-s', modified_prompt_content],
            input=staged_diff,
            capture_output=True,
            text=True,
            # check=True # Don't check here, we want to capture stderr on failure
        )
        commit_msg = llm_process.stdout.strip() # Use strip to remove leading/trailing whitespace/newlines

        # Clean the LLM response by removing code blocks and thinking tags
        commit_msg = clean_llm_response(commit_msg)

        if llm_process.returncode != 0:
            # LLM command failed
            print_color(RED, f"Error: 'llm' command failed to generate the commit message (Exit code {llm_process.returncode}):")
            print_color(RED, llm_process.stderr) # Print stderr which might contain the error message
            print_color(NC, "\nManually set the commit message") # Add message without color reset
            sys.exit(1)

    except FileNotFoundError:
        print_color(RED, "Error: 'llm' command not found. Please ensure it's installed and in your PATH.")
        sys.exit(1)
    except Exception as e:
        print_color(RED, f"An unexpected error occurred while running 'llm': {e}")
        sys.exit(1)
    finally:
        # Ensure the spinner stops even if there was an error
        spinner_stop_event.set()
        if spinner_thread.is_alive():
             # Wait briefly for the thread to finish cleaning up terminal state
             spinner_thread.join(timeout=1.0)


    # --- Display Generated Message ---
    print_color(BLUE, "=== Generated Commit Message ===")

    # Split the message by lines and apply colors
    lines = commit_msg.splitlines()
    if lines:
        # Header (first line)
        print_color(YELLOW, lines[0])
        # Body and Footers (remaining lines)
        for line in lines[1:]:
            if not line: # Empty lines
                print()
            elif line.startswith("BREAKING CHANGE:") or line.startswith("CLOSED ISSUES:"):
                print_color(MAGENTA, line)
            else:
                print_color(GREEN, line)
    else:
         print_color(YELLOW, "(No message generated)")


    print_color(BLUE, "================================")
    print() # Add a newline

    # --- Write Message to File ---
    try:
        with open(commit_file_path, 'w', encoding='utf-8') as f:
            f.write(commit_msg)
    except Exception as e:
        print_color(RED, f"Error writing commit message to file '{commit_file_path}': {e}")
        sys.exit(1)

    sys.exit(0) # Explicitly exit successfully

if __name__ == "__main__":
    # Reset spinner stop event at the start in case it's run multiple times
    spinner_stop_event.clear()
    main()
